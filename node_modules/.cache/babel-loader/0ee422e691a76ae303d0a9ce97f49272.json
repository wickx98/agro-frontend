{"ast":null,"code":"import _slicedToArray from\"C:/Users/hasit/Desktop/Project new new/web-cw-main/web-cw-main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import{Image}from'react-bootstrap';import{GoogleMap,withScriptjs,withGoogleMap,Marker,InfoWindow}from'react-google-maps';import Message from'./../../components/Message/Message';import Loader from'./../../components/Loader/Loader';import{listSupplierProductsForAll}from'./../../actions/supplierProduct';import MapStyles from'./MapStyles';import Rating from'./Rating/Rating';var Map=function Map(){var dispatch=useDispatch();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedPlace=_useState2[0],setSelectedPlace=_useState2[1];var supplierProductForAllList=useSelector(function(state){return state.supplierProductForAllList;});var loadingProducts=supplierProductForAllList.loading,errorProducts=supplierProductForAllList.error,products=supplierProductForAllList.products;useEffect(function(){dispatch(listSupplierProductsForAll());},[dispatch]);return/*#__PURE__*/_jsxs(GoogleMap,{defaultCenter:{lat:6.927079,lng:79.861244},defaultZoom:10,defaultOptions:{styles:MapStyles},children:[loadingProducts?/*#__PURE__*/_jsx(Loader,{}):errorProducts?/*#__PURE__*/_jsx(Message,{variant:\"danger\",children:errorProducts}):products.map(function(place){return/*#__PURE__*/_jsx(Marker,{position:{lat:place.latitude,lng:place.longitude},onClick:function onClick(){setSelectedPlace(place);},icon:{url:'/mapIcon.svg',scaledSize:new window.google.maps.Size(25,25)}},place._id);}),selectedPlace&&/*#__PURE__*/_jsx(InfoWindow,{position:{lat:selectedPlace.latitude,lng:selectedPlace.longitude},onCloseClick:function onCloseClick(){setSelectedPlace(null);},children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Image,{className:\"mx-auto d-block img-fluid mb-1\",rounded:true,width:\"120px\",src:selectedPlace.image,alt:selectedPlace.name}),/*#__PURE__*/_jsx(\"h4\",{style:{textAlign:\"center\"},children:selectedPlace.cropSelection}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Description: \",selectedPlace.description,/*#__PURE__*/_jsx(\"br\",{}),selectedPlace.isReviwed?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(Rating,{text:\"Rating\",value:selectedPlace.rating})})}):'']})]})})]});};var WrappedMap=withScriptjs(withGoogleMap(Map));export default WrappedMap;","map":{"version":3,"sources":["C:/Users/hasit/Desktop/Project new new/web-cw-main/web-cw-main/frontend/src/screens/Map/Map.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","Image","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","Message","Loader","listSupplierProductsForAll","MapStyles","Rating","Map","dispatch","selectedPlace","setSelectedPlace","supplierProductForAllList","state","loadingProducts","loading","errorProducts","error","products","lat","lng","styles","map","place","latitude","longitude","url","scaledSize","window","google","maps","Size","_id","image","name","textAlign","cropSelection","description","isReviwed","rating","WrappedMap"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Image } from 'react-bootstrap'\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker,\n    InfoWindow\n} from 'react-google-maps'\nimport Message from './../../components/Message/Message'\nimport Loader from './../../components/Loader/Loader'\nimport { listSupplierProductsForAll } from './../../actions/supplierProduct'\nimport MapStyles from './MapStyles'\nimport Rating from './Rating/Rating'\n\nconst Map = () => {\n\n    const dispatch = useDispatch()\n\n    const [selectedPlace, setSelectedPlace] = useState(null)\n\n    const supplierProductForAllList = useSelector(state => state.supplierProductForAllList)\n    const { loading: loadingProducts, error: errorProducts, products } = supplierProductForAllList\n\n    useEffect(() => {\n        dispatch(listSupplierProductsForAll())\n    }, [dispatch])\n\n    return (\n        <GoogleMap\n            defaultCenter={{ lat: 6.927079, lng: 79.861244 }}\n            defaultZoom={10}\n            defaultOptions={{ styles: MapStyles }}\n        >\n            {\n                loadingProducts ? <Loader />\n                    : errorProducts\n                        ? <Message variant='danger'>{errorProducts}</Message>\n                        : (\n                            products.map(place => (\n                                <Marker\n                                    key={place._id}\n                                    position={{\n                                        lat: place.latitude,\n                                        lng: place.longitude\n                                    }}\n                                    onClick={() => {\n                                        setSelectedPlace(place)\n                                    }}\n                                    icon={{\n                                        url: '/mapIcon.svg',\n                                        scaledSize: new window.google.maps.Size(25, 25)\n                                    }}\n                                />\n                            ))\n                        )\n\n            }\n            {\n                selectedPlace && (\n                    <InfoWindow\n                        position={{\n                            lat: selectedPlace.latitude,\n                            lng: selectedPlace.longitude\n                        }}\n                        onCloseClick={() => {\n                            setSelectedPlace(null)\n                        }}\n                    >\n                        <div>\n                            <Image className=\"mx-auto d-block img-fluid mb-1\" rounded width=\"120px\" src={selectedPlace.image} alt={selectedPlace.name} />\n                            <h4 style={{ textAlign: \"center\" }}>{selectedPlace.cropSelection}</h4>\n                            <p>\n                                Description: {selectedPlace.description}<br />\n                                {\n                                    selectedPlace.isReviwed\n                                        ? (<>\n                                            <p><Rating text=\"Rating\" value={selectedPlace.rating} /></p>\n                                        </>\n                                        )\n                                        : ''\n                                }\n                            </p>\n                        </div>\n                    </InfoWindow>\n                )\n            }\n        </GoogleMap>\n\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map))\n\nexport default WrappedMap\n"]},"metadata":{},"sourceType":"module"}